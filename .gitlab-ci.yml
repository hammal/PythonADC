stages:
  - test
  - simulate

image: continuumio/anaconda3

before_script:
  - "conda install -y scipy"
  - "pip install cvxopt"
  - "mkdir -p /root/.config/matplotlib"
  - "echo 'backend : Agg' > /root/.config/matplotlib/matplotlibrc"

testEvaluate:
  stage: test
  script:
    - "python -m AnalogToDigital.test.test_evaluate"

testReconstruction:
  stage: test
  script:
    - "python -m AnalogToDigital.test.test_reconstruction"

testSimulator:
  stage: test
  script:
    - "python -m AnalogToDigital.test.test_simulator"

testSystem:
  stage: test
  script:
    - "python -m AnalogToDigital.test.test_system"

testTopologiGenerator:
  stage: test
  script:
        - "python -m AnalogToDigital.test.test_topologiGenerator"

testDeltaSigma:
  before_script:
    # - "git clone https://github.com/ggventurini/python-deltasigma.git"
    # - "cd python-deltasigma"
    # - "python setup.py install"
    # - "cd .."
    - "apt-get install -y libopenblas-dev gfortran"
    - "pip install deltasigma"
    - "mkdir -p /root/.config/matplotlib"
    - "echo 'backend : Agg' > /root/.config/matplotlib/matplotlibrc"
  stage: test
  script:
        - "python -m AnalogToDigital.test.test_deltaSigma"

gmCADC:
  stage: simulate
  script:
    - "python Examples/gmCADC.py"
    - "python Examples/gmCADCMultipleObservations.py"
    # - "python gmCADCParallel.py 1 10 1"
    # - "python gmCADCParallelCompensatedGain.py 1 10 1"
    # - "python gmCADCParallelNumberComparisson.py 1 10 1"
    # - "python gmCFullWienerFilter.py"

# gmCIntegrator:
#   script:
#     - "python gmCIntegratorChain.py"
#     # - "python gmCIntegratorChainParallel.py 1 10 1"
#     # - "python gmCIntegratorChainParalleNumberReference.py 1 10 1"
#     # - "python gmCIntegratorFullWiener.py"
#
# integratorVsFeedback:
#   script:
#     - "python integratorVsFeedback.py"
#
# various:
#   script:
#     - "python LMSFilter.py"
#     # - "python parallelIntegrator.py"
#     # - "python reconstructionExample.py"
#     # - "python selfControllinggmCADC.py"
#     # - "python SigmaDeltaExample.py"
#     # - "python topologiExample.py"


# simulator:
#   script:
#     - "python simulate.py"
#     # - "python simulator_Example.py"
#     # - "python sqe_plot.py"
#
# transmissionline:
#   script:
#     echo "To be done"
#     # - "python transmissionLine.py"
#
# randomMESH:
#   script:
#     - "python randomMESHADC.py"
#     - "python randomTransformedADC.py"
